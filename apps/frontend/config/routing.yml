# You can find more information about this file on the symfony website:
# http://www.symfony-project.org/reference/1_4/en/10-Routing

# default rules
homepage:
  url: '/'
  param:
    module: ppehome
    action: index

# create an edit on the website.
edit_creator:
  url: /create
  param:
    module: create
    action: index

# receive help at a moment's notice.
edit_creator_help:
  url: /create/help
  param:
    module: create
    action: help

# use ajaj to get the needed data.
edit_creator_song:
  url: /create/song/:id
  param:
    module: create
    action: ajax
  requirements:
    id: \d+

# use ajaj to determine if the user can edit Andamiro edits.
edit_creator_andamiro:
  url: /create/andamiro/:userid
  param:
    module: create
    action: andamiro
  requirements:
    id: \d+

# use ajaj to determine if the song can have a routine chart.
edit_creator_routine:
  url: /create/routine/:songid
  param:
    module: create
    action: routine
  requirements:
    id: \d+

# use ajaj to load the file.
edit_creator_loadFile:
  url: /create/loadFile
  class: sfRequestRoute
  param:
    module: create
    action: loadInput
  requirements:
    sf_method: [POST]

# use ajaj to upload the file and report success.
edit_creator_upload:
  url: /create/upload
  class: sfRequestRoute
  param:
    module: create
    action: upload
  requirements:
    sf_method: [POST]

# use ajaj to get the list of edits the user has.
edit_creator_loadSite:
  url: /create/loadSite/:id
  param:
    module: create
    action: loadSite
  requirements:
    id: \d+

# use ajaj to get the specific edit requested.
edit_creator_loadSiteEdit:
  url: /create/loadSiteEdit/:id
  param:
    module: create
    action: loadSiteEdit
  requirements:
    id: \d+

# download the file the user made.
edit_creator_download:
  url: /create/download
  class: sfRequestRoute
  param:
    module: create
    action: download
  requirements:
    sf_method: [POST]

# Upload an edit
upload_get:
  url: /upload
  class: sfRequestRoute
  param:
    module: upload
    action: index
  requirements:
    sf_method: [GET]

# The actual processing
upload_post:
  url: /upload
  class: sfRequestRoute
  param:
    module: upload
    action: validate
  requirements:
    sf_method: [POST]

# temp xml page
xmltest:
  url: /xmltest
  param:
    module: xmltest
    action: index

# see the ratings of an edit.
ratings:
  url: /votes/:eid
  param:
    module: votes
    action: index
  requirements:
    eid: \d+

ratings_404:
  url: /votes
  param:
    module: votes
    action: none
  
# Add/change a vote for an edit.
rate_add_get:
  url: /rate/:eid
  class: sfRequestRoute
  param:
    module: votes
    action: add
  requirements:
    sf_method: [GET]

rate_add_post:
  url: /rate/:eid
  class: sfRequestRoute
  param:
    module: votes
    action: added
  requirements:
    sf_method: [POST]

# You can't vote for your own edit.
rate_subtract:
  url: /rate
  param:
    module: votes
    action: subtract

# credits / thanks page
thanks:
  url: /thanks
  param:
    module: thanks
    action: index

# Base edit page:
base_edit:
  url: /base/:page
  param:
    module: base
    action: index
    page: 1
  requirements:
    page: \d+

# Download a base edit.
download_base_edit:
  url: /base/download/:id/:type
  param:
    module: base
    action: download

# Illegal base download:
download_base_edit_404:
  url: /base/download/*
  param:
    module: base
    action: download

# The dynamic chart generator
chart_gen_get:
  url: /chart
  class: sfRequestRoute
  param:
    module: chart
    action: index
  requirements:
    sf_method: [GET]

# The result of the chart generator.
chart_gen_post:
  url: /chart
  class: sfRequestRoute
  param:
    module: chart
    action: validate
  requirements:
    sf_method: [POST]

# The newer, friendlier chart generator (members only)
chart_adv_get:
  url: /chart/adv
  class: sfRequestRoute
  param:
    module: chart
    action: advanced
  requirements:
    sf_method: [GET]

# The result of the above processing
chart_adv_post:
  url: /chart/adv
  class: sfRequestRoute
  param:
    module: chart
    action: advProcess
  requirements:
    sf_method: [POST]

# Show the list of songs for official charting.
chart_off_get:
  url: /chart/official
  class: sfRequestRoute
  param:
    module: chart
    action: official
  requirements:
    sf_method: [GET]

# Generate the chosen chart.
chart_off_post:
  url: /chart/official
  class: sfRequestRoute
  param:
    module: chart
    action: offProcess
  requirements:
    sf_method: [POST]

# Quickly generate a chart.
chart_quick:
  url: /chart/quick/:id/:kind
  param:
    module: chart
    action: quick
  requirements:
    id: \d+

# The edit stat getter/validator
edit_stat_get:
  url: /stats
  class: sfRequestRoute
  param:
    module: stats
    action: index
  requirements:
    sf_method: [GET]

# The results of the edit stat getter (post)
edit_stat_post:
  url: /stats
  class: sfRequestRoute
  param:
    module: stats
    action: validate
  requirements:
    sf_method: [POST]

# Login page
login_get:
  url: /login
  class: sfRequestRoute
  param:
    module: login
    action: index
  requirements:
    sf_method: [GET]

# Login after submitting
login_post:
  url: /login
  class: sfRequestRoute
  param:
    module: login
    action: validate
  requirements:
    sf_method: [POST]

# Log the user out.
logout:
  url: /logout
  param:
    module: logout
    action: index

# Contact page: fill out the form
contact_get:
  url: /contact
  class: sfRequestRoute
  param:
    module: contact
    action: index
  requirements:
    sf_method: [GET]

# Send the contact email.
contact_post:
  url: /contact
  class: sfRequestRoute
  param:
    module: contact
    action: validate
  requirements:
    sf_method: [POST]

# Confirm someone's account
confirm_get_code:
  url: /confirm/:code
  class: sfRequestRoute
  param:
    module: confirm
    action: index
  requirements:
    sf_method: [GET]

confirm_get:
  # Can I get the URL to work with optional parameters?
  url: /confirm
  class: sfRequestRoute
  param:
    module: confirm
    action: index
  requirements:
    sf_method: [GET]

# Process confirmation request
confirm_post:
  url: /confirm
  class: sfRequestRoute
  param:
    module: confirm
    action: validate
  requirements:
    sf_method: [POST]

# Help getting your account to work
help:
  url: /help
  class: sfRequestRoute
  param:
    module: help
    action: index
  requirements:
    sf_method: [GET]

# Help has been given (hopefully)
help_post:
  url: /help
  class: sfRequestRoute
  param:
    module: help
    action: validate
  requirements:
    sf_method: [POST]

# Reset your password here (hopefully)
reset_get:
  url: /reset
  class: sfRequestRoute
  param:
    module: reset
    action: index
  requirements:
    sf_method: [GET]

# Reset + confirmation code
reset_get_code:
  url: /reset/:code
  class: sfRequestRoute
  param:
    module: reset
    action: index
  requirements:
    sf_method: [GET]

# Actual processing of above
reset_post:
  url: /reset
  class: sfRequestRoute
  param:
    module: reset
    action: validate
  requirements:
    sf_method: [POST]

# General edits page (this may change)
edits:
  url: /edits
  param:
    module: edits
    action: index

# Edits by song:
edit_song:
  url: /songs
  param:
    module: edits
    action: song

# The chosen song (unsure if I'll use the pager)
edit_csong:
  url: /songs/:id/:page
  param:
    module: edits
    action: chosenSong
    page: 1
  requirements:
    id: \d+

# Edits by user
edit_user:
  url: /users
  param:
    module: edits
    action: user

# Edits made by Andamiro / Official Charts.
edit_official:
  url: /andamiro/:page
  param:
    module: edits
    action: official
    page: 1
  requirements:
    page: \d+

# Edits with no known author.
edit_unknown:
  url: /unknown/:page
  param:
    module: edits
    action: unknown
    page: 1
  requirements:
    page: \d+

# The chosen user (unsure if I'll use the pager)
edit_cuser:
  url: /users/:id/:page
  param:
    module: edits
    action: chosenUser
    page: 1
  requirements:
    id: \d+

# Download the chosen edit
edit_download:
  url: /edits/download/:id
  param:
    module: edits
    action: download
  requirements:
    id: \d+

# Illegal edit download
edit_download_404:
  url: /edits/download/*
  param:
    module: edits
    action: download

# Registration page
register_get:
  url: /register
  class: sfRequestRoute
  param:
    module: register
    action: index
  requirements:
    sf_method: [GET]

# Once you register:
register_post:
  url: /register
  class: sfRequestRoute
  param:
    module: register
    action: validate
  requirements:
    sf_method: [POST]
