PPE_User_Role:
  actAs: { Timestampable: ~ }
  columns:
    role: { type: string(32), notnull: true; unique: true }
  options:
    type: INNODB
    collate: utf8_unicode_ci
    charset: utf8

PPE_User_User:
  actAs: { Timestampable: ~ }
  columns:
    name: { type: string(12), notnull: true }
    email: { type: string(320), notnull: true }
    role_id: { type: integer, notnull: true }
    is_confirmed: { type: boolean, notnull: true, default: 0 }
  relations:
    PPE_User_Role:
      local: role_id
      foreign: id
      foreignAlias: PPE_User_Users
      foreignKeyName: user_role_fk
  indexes:
    user_index:
      fields: [name]
      type: unique
    email_index:
      fields: [email]
      type: unique
  options:
    type: INNODB
    collate: utf8_unicode_ci
    charset: utf8

PPE_User_Power:
  columns:
    user_id: { type: integer, notnull: true }
    role_id: { type: integer, notnull: true }
  relations:
    PPE_User_User:
      local: user_id
      foreign: id
      foreignAlias: PPE_User_Powers
      foreignKeyName: power_user_fk
    PPE_User_Role:
      local: role_id
      foreign: id
      foreignAlias: PPE_User_Powers
      foreignKeyName: power_role_fk
  indexes:
    user_roles_index:
      fields: [user_id, role_id]
      type: unique
  options:
    type: INNODB
    collate: utf8_unicode_ci
    charset: utf8

PPE_User_Condiment:
  actAs: { Timestampable: ~ }
  columns:
    user_id: { type: integer, notnull: true }
    oregano: { type: char(32), notnull: true }
    salt: { type: char(5), notnull: true }
    pepper: { type: char(64), notnull: true }
  relations:
    PPE_User_User:
      local: user_id
      foreign: id
      foreignAlias: PPE_User_Condiments
      foreignKeyName: condiment_user_fk
  checks:
    oregano_check: char_length(oregano) = 32
    salt_check: char_length(salt) = 5
    pepper_check: char_length(pepper) = 64
  options:
    type: INNODB
    collate: utf8_unicode_ci
    charset: utf8

PPE_Song_Song:
  actAs: { Timestampable: ~ }
  columns:
    name: { type: string(64), notnull: true }
    abbr: { type: char(5), notnull: true }
    measures: { type: integer, notnull: true, default: 50 }
    is_problem: { type: boolean, notnull: true, default: 0 }
  indexes:
    song_index:
      fields: [name]
      type: unique
    abbr_index:
      fields: [abbr]
      type: unique
  checks:
    measure_check: measures > 0
  options:
    type: INNODB
    collate: utf8_unicode_ci
    charset: utf8

PPE_Song_Stop:
  actAs: { Timestampable: ~ }
  columns:
    song_id: { type: integer, notnull: true }
    beat: { type: decimal, notnull: true, default: 0, size: 8, scale: 4 }
    break: { type: decimal, notnull: false, size: 4, scale: 2 }
  relations:
    PPE_Song_Song:
      local: song_id
      foreign: id
      foreignAlias: PPE_Song_Songs
      foreignKeyName: stop_song_fk
  indexes:
    stop_index:
      fields: [song_id, beat]
      type: unique
  checks:
    beat_check: beat > 0
    break_check: break IS NULL OR break > 0
  options:
    type: INNODB
    collate: utf8_unicode_ci
    charset: utf8

PPE_Song_BPM:
  actAs: { Timestampable: ~ }
  columns:
    song_id: { type: integer, notnull: true }
    beat: { type: decimal, notnull: true, default: 0, size: 8, scale: 4 }
    bpm: { type: decimal, notnull: false, size: 8, scale: 4 }
  relations:
    PPE_Song_Song:
      local: song_id
      foreign: id
      foreignAlias: PPE_Song_Songs
      foreignKeyName: bpm_song_fk
  indexes:
    bpm_index:
      fields: [song_id, beat]
      type: unique
  checks:
    beat_check: beat >= 0
    # No negative BPMs yet.
    bpm_check: bpm IS NULL OR bpm > 0
  options:
    type: INNODB
    collate: utf8_unicode_ci
    charset: utf8

PPE_Edit_Edit:
  actAs: { Timestampable: ~; SoftDelete: ~ }
  columns:
    user_id: { type: integer, notnull: true }
    song_id: { type: integer, notnull: true }
    title: { type: string(12), notnull: true }
    is_single: { type: boolean, notnull: true, default: 1 }
    diff: { type: integer, notnull: true, default: 10 }
    steps: { type: integer, notnull: true }
    jumps: { type: integer, notnull: true }
    holds: { type: integer, notnull: true }
    mines: { type: integer, notnull: true }
    trips: { type: integer, notnull: true }
    rolls: { type: integer, notnull: true }
    lifts: { type: integer, notnull: true, default: 0 }
    fakes: { type: integer, notnull: true, default: 0 }
    is_problem: { type: boolean, notnull: true, default: 0 }
  relations:
    PPE_User_User:
      local: user_id
      foreign: id
      foreignAlias: PPE_Edit_Edits
      foreignKeyName: edit_user_fk
    PPE_Song_Song:
      local: song_id
      foreign: id
      foreignAlias: PPE_Edit_Edits
      foreignKeyName: edit_song_fk
  indexes:
    author_index:
      fields: [user_id, song_id, title, is_single]
      type: unique
  checks:
    diff_check: diff > 0
    steps_check: steps > 0
  options:
    type: INNODB
    collate: utf8_unicode_ci
    charset: utf8

PPE_Vote_Vote:
  actAs: { Timestampable: ~ }
  columns:
    user_id: { type: integer, notnull: true }
    edit_id: { type: integer, notnull: true }
    rating: { type: integer, notnull: true }
    reason: { type: string, notnull: false }
    is_problem: { type: boolean, notnull: true, default: 0 }
  relations:
    PPE_User_User:
      local: user_id
      foreign: id
      foreignAlias: PPE_Vote_Votes
      foreignKeyName: vote_user_fk
    PPE_Edit_Edit:
      local: edit_id
      foreign: id
      foreignAlias: PPE_Vote_Votes
      foreignKeyName: vote_edit_fk
  indexes:
    single_vote_index:
      fields: [user_id, edit_id, rating]
      type: unique
  checks:
    rating_check: rating >= 0 AND rating <= 10
  options:
    type: INNODB
    collate: utf8_unicode_ci
    charset: utf8
